name: Publish tokens
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'package.json'

permissions:
  id-token: write
  contents: read

env:
  CDN_BUCKET: gc-design-system-production-cdn
  CDN_REGION: ca-central-1
  PACKAGE_NAME: '@cdssnc/gcds-tokens'

jobs:
  build-deploy:
    name: Publish package
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Slack notify on release and publish
        run: |
         v1=$(jq -r '.version' package.json)
         echo "The version is $v1"
         echo 'version is '$v1
         json=$(jq -n --arg version "$VERSION" '{"text":"ðŸš€ New release available! @cdssnc/gcds-tokens *version <https://github.com/cds-snc/gcds-tokens/releases/tag/gcds-tokens-v'$VERSION')|${{steps.publish.outputs.id}}>*"}'
         echo "$json"

      # - name: Publish
      #   uses: JS-DevTools/npm-publish@52bacc14a33500e8dcf0afe1bff552d638216212
      #   id: publish
      #   with:
      #     token: ${{ secrets.NPM_TOKEN }}

      # - name: Configure AWS credentials using OIDC
      #   if: steps.publish.outputs.id != ''
      #   uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      #   with:
      #     role-to-assume: arn:aws:iam::307395567143:role/gcds-tokens-apply
      #     role-session-name: CDNPublish
      #     aws-region: ${{ env.CDN_REGION }}

      # - name: Update CDN
      #   if: steps.publish.outputs.id != ''
      #   run: |
      #     PUBLISHED_PACKAGE="${{ steps.publish.outputs.id }}"

      #     mkdir -p ./tmp \
      #       && sleep 60 \
      #       && npm install --prefix ./tmp "$PUBLISHED_PACKAGE" \
      #       && cd ./tmp/node_modules

      #     aws s3 sync ./${{ env.PACKAGE_NAME }} s3://${{ env.CDN_BUCKET }}/"$PUBLISHED_PACKAGE" --delete
      #     aws s3 sync ./${{ env.PACKAGE_NAME }} s3://${{ env.CDN_BUCKET }}/${{ env.PACKAGE_NAME }}@latest --delete
      #     aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key "$PUBLISHED_PACKAGE"/package.json
      #     aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key ${{ env.PACKAGE_NAME }}@latest/package.json

      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_CLOUDFRONT_DIST_ID }} --paths "/*"

      # - name: Report deployment to Sentinel
      #   if: steps.publish.outputs.id != ''
      #   uses: cds-snc/sentinel-forward-data-action@main
      #   with:
      #     input_data: '{"product": "design-system", "sha": "${{ github.sha }}", "version": "${{steps.publish.outputs.id}}", "repository": "${{ github.repository }}", "environment": "production", "status": "${{ job.status }}"}'
      #     log_type: CDS_Product_Deployment_Data
      #     log_analytics_workspace_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
      #     log_analytics_workspace_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

      # - name: Slack notify on failure
      #   if: failure()
      #   run: |
      #     json='{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: Publish @cdssnc/gcds-tokens failed: <https://github.com/cds-snc/gcds-tokens/actions/workflows/publish.yml|Publish tokens>"}}]}'
      #     curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.SLACK_WEBHOOK_OPS }}

      # - name: Slack notify on release and publish
      #   if: steps.publish.outputs.id != ''
      #   env: 
      #     VERSION: $(jq -r '.version' package.json)
      #   run: |
      #     json='{"text":"ðŸš€ New release available! @cdssnc/gcds-tokens *version <https://github.com/cds-snc/gcds-tokens/releases/tag/gcds-tokens-v${{ VERSION }}|${{steps.publish.outputs.id}}>*"}'
      #     curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.SLACK_WEBHOOK_DSNDEV }}
          
